services:
  - docker:dind

variables:
  NGINX_IMAGE: $CI_REGISTRY_IMAGE/nginx
  FF_USE_FASTZIP: 'true'
  ARTIFACT_COMPRESSION_LEVEL: 'fastest'
  CACHE_COMPRESSION_LEVEL: 'fastest'

stages:
  - build
  - docker

build_dist:
  stage: build
  only:
    - tags
  image: node:16-alpine
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .yarn/cache/
  before_script:
    - apk add --no-cache autoconf automake file g++ libtool make nasm libpng-dev
  script:
    - yarn install --immutable
    - yarn build
  artifacts:
    paths:
      - public/dist/

build_test:
  image: docker:stable
  stage: docker
  dependencies:
    - build_dist
  rules:
    - if: $CI_COMMIT_REF_NAME != "main" && $CI_COMMIT_TAG != null
      when: on_success
    - when: never
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull "$NGINX_IMAGE:test" || true
    - >-
      docker build
      --cache-from "$NGINX_IMAGE:test"
      -f ./docker/Dockerfile-nginx.dockerfile
      --tag "$NGINX_IMAGE:$CI_COMMIT_TAG"
      --tag "$NGINX_IMAGE:test"
      .
    - docker push "$NGINX_IMAGE:$CI_COMMIT_TAG"
    - docker push "$NGINX_IMAGE:test"

build_prod:
  image: docker:stable
  stage: docker
  dependencies:
    - build_dist
  rules:
    - if: $CI_COMMIT_REF_NAME == "main" && $CI_COMMIT_TAG != null
      when: on_success
    - when: never
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull "$NGINX_IMAGE:latest" || true
    - >-
      docker build
      --cache-from "$NGINX_IMAGE:latest"
      -f ./docker/Dockerfile-nginx.dockerfile
      --tag "$NGINX_IMAGE:$CI_COMMIT_TAG"
      --tag "$NGINX_IMAGE:latest"
      .
    - docker push "$NGINX_IMAGE:$CI_COMMIT_TAG"
    - docker push "$NGINX_IMAGE:latest"
